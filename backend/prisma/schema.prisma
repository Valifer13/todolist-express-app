// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum type initialization

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETE
  CANCELED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// Model initialization

model User {
  id         Int        @id @default(autoincrement())
  username   String
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  todos      Todo[]
  session    Session[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  todos     Todo[]
}

model Todo {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  status      Status    @default(PENDING)
  dueDate     DateTime?
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
}

model Session {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  ipAddress     String
  userAgent     String
  payload       String
  refreshToken  String
  expiresAt     DateTime
  last_activity DateTime @default(now())

  @@index([userId])
}
